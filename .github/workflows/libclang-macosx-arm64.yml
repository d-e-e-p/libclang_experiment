name: libclang-macosx-arm64

on: [push, pull_request]

env:
  LLVM_VER: 16.0.4

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: install wheel dependencies
      run: |
        pip3 install wheel
    - name: install gnu-tar
      run: |
        brew install gnu-tar
    - name: get llvm-project
      run: |
        wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VER/llvm-project-$LLVM_VER.src.tar.xz
        tar xf llvm-$LLVM_VER.src.tar.xz
        mv llvm-$LLVM_VER.src llvm-project-$LLVM_VER
        cat /dev/null > ./llvm/cmake/modules/CheckAtomic.cmake
    - name: cmake
      run: |
        cd llvm-project-$LLVM_VER && \
        cmake -S llvm -B build \
          -G "Unix Makefiles" -B build \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER=`which clang++` \
          -DCMAKE_C_COMPILER=`which clang` \
          -DCMAKE_INSTALL_PREFIX=$HOME/.local \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DLLVM_DEFAULT_TARGET_TRIPLE=16.0.4-arm64-apple-darwin22.4 \
          -DLLVM_ENABLE_PROJECTS=clang \
          -DLLVM_ENABLE_TERMINFO=OFF \
          -DLLVM_ENABLE_WERROR=FALSE \
          -DLLVM_ENABLE_ZLIB=OFF \
          -DLLVM_ENABLE_ZSTD=OFF \
          -DLLVM_TARGETS_TO_BUILD=AArch64
    - name: build
      run: cd llvm-project-$LLVM_VER && \
        cmake --build build --config RelWithDebInfo --target libclang -parallel $(sysctl -n hw.ncpu)
    - name: print dependencies
      run: |
        strip -u llvm-project-$LLVM_VER/build/lib/libclang.dylib
        du -csh llvm-project-$LLVM_VER/build/lib/libclang.dylib
        file llvm-project-$LLVM_VER/build/lib/libclang.dylib
        otool -L llvm-project-$LLVM_VER/build/lib/libclang.dylib
        dyld_info -platform -dependents llvm-project-$LLVM_VER/build/lib/libclang.dylib 
    - name: create and print sha512sum
      run: |
        cd llvm-project-$LLVM_VER/build/lib
        shasum -a512 libclang.dylib > libclang.dylib.$LLVM_VER.macosx-arm64.sha512sum
        echo "Checksum is: "
        cat libclang.dylib.$LLVM_VER.macosx-arm64.sha512sum
        gtar zcvf libclang.dylib.$LLVM_VER.macosx-arm64.tar.gz libclang.dylib libclang.dylib.$LLVM_VER.macosx-amd64.sha512sum
        shasum -a512 libclang.dylib.$LLVM_VER.macosx-arm64.tar.gz
    - uses: actions/upload-artifact@v3
      with:
        name: libclang.dylib.${{env.LLVM_VER}}.macosx-arm64.tar.gz
        path: llvm-project-${{env.LLVM_VER}}/build/lib/libclang.dylib.${{env.LLVM_VER}}.macosx-arm64.tar.gz
    - name: generate wheel package
      run: |
        cp llvm-project-$LLVM_VER/build/lib/libclang.dylib native/
        python3 setup_ext.py bdist_wheel --universal --plat-name=macosx_22.4_arm64
    - uses: actions/upload-artifact@v3
      with:
        name: wheel-${{env.LLVM_VER}}-macosx_22.4_arm64
        path: dist/*.whl

  upload-to-pypi:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wheel-${{env.LLVM_VER}}-macosx_22.4_arm64
        path: dist/
    - name: Publish to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages_dir: dist/
        password: ${{ secrets.PYPI_TOKEN }}
        verbose: true
        print_hash: true
